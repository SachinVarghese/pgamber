// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/incomebracket"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/individual"
)

// IncomeBracketCreate is the builder for creating a IncomeBracket entity.
type IncomeBracketCreate struct {
	config
	mutation *IncomeBracketMutation
	hooks    []Hook
}

// SetClass sets the "class" field.
func (ibc *IncomeBracketCreate) SetClass(i incomebracket.Class) *IncomeBracketCreate {
	ibc.mutation.SetClass(i)
	return ibc
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (ibc *IncomeBracketCreate) SetNillableClass(i *incomebracket.Class) *IncomeBracketCreate {
	if i != nil {
		ibc.SetClass(*i)
	}
	return ibc
}

// SetPersonID sets the "person" edge to the Individual entity by ID.
func (ibc *IncomeBracketCreate) SetPersonID(id int) *IncomeBracketCreate {
	ibc.mutation.SetPersonID(id)
	return ibc
}

// SetNillablePersonID sets the "person" edge to the Individual entity by ID if the given value is not nil.
func (ibc *IncomeBracketCreate) SetNillablePersonID(id *int) *IncomeBracketCreate {
	if id != nil {
		ibc = ibc.SetPersonID(*id)
	}
	return ibc
}

// SetPerson sets the "person" edge to the Individual entity.
func (ibc *IncomeBracketCreate) SetPerson(i *Individual) *IncomeBracketCreate {
	return ibc.SetPersonID(i.ID)
}

// Mutation returns the IncomeBracketMutation object of the builder.
func (ibc *IncomeBracketCreate) Mutation() *IncomeBracketMutation {
	return ibc.mutation
}

// Save creates the IncomeBracket in the database.
func (ibc *IncomeBracketCreate) Save(ctx context.Context) (*IncomeBracket, error) {
	var (
		err  error
		node *IncomeBracket
	)
	ibc.defaults()
	if len(ibc.hooks) == 0 {
		if err = ibc.check(); err != nil {
			return nil, err
		}
		node, err = ibc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IncomeBracketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ibc.check(); err != nil {
				return nil, err
			}
			ibc.mutation = mutation
			if node, err = ibc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ibc.hooks) - 1; i >= 0; i-- {
			if ibc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ibc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ibc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*IncomeBracket)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IncomeBracketMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ibc *IncomeBracketCreate) SaveX(ctx context.Context) *IncomeBracket {
	v, err := ibc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ibc *IncomeBracketCreate) Exec(ctx context.Context) error {
	_, err := ibc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibc *IncomeBracketCreate) ExecX(ctx context.Context) {
	if err := ibc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ibc *IncomeBracketCreate) defaults() {
	if _, ok := ibc.mutation.Class(); !ok {
		v := incomebracket.DefaultClass
		ibc.mutation.SetClass(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibc *IncomeBracketCreate) check() error {
	if _, ok := ibc.mutation.Class(); !ok {
		return &ValidationError{Name: "class", err: errors.New(`gen: missing required field "IncomeBracket.class"`)}
	}
	if v, ok := ibc.mutation.Class(); ok {
		if err := incomebracket.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`gen: validator failed for field "IncomeBracket.class": %w`, err)}
		}
	}
	return nil
}

func (ibc *IncomeBracketCreate) sqlSave(ctx context.Context) (*IncomeBracket, error) {
	_node, _spec := ibc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ibc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ibc *IncomeBracketCreate) createSpec() (*IncomeBracket, *sqlgraph.CreateSpec) {
	var (
		_node = &IncomeBracket{config: ibc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: incomebracket.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: incomebracket.FieldID,
			},
		}
	)
	if value, ok := ibc.mutation.Class(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: incomebracket.FieldClass,
		})
		_node.Class = value
	}
	if nodes := ibc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   incomebracket.PersonTable,
			Columns: []string{incomebracket.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: individual.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.individual_bracket = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IncomeBracketCreateBulk is the builder for creating many IncomeBracket entities in bulk.
type IncomeBracketCreateBulk struct {
	config
	builders []*IncomeBracketCreate
}

// Save creates the IncomeBracket entities in the database.
func (ibcb *IncomeBracketCreateBulk) Save(ctx context.Context) ([]*IncomeBracket, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ibcb.builders))
	nodes := make([]*IncomeBracket, len(ibcb.builders))
	mutators := make([]Mutator, len(ibcb.builders))
	for i := range ibcb.builders {
		func(i int, root context.Context) {
			builder := ibcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IncomeBracketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ibcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ibcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ibcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ibcb *IncomeBracketCreateBulk) SaveX(ctx context.Context) []*IncomeBracket {
	v, err := ibcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ibcb *IncomeBracketCreateBulk) Exec(ctx context.Context) error {
	_, err := ibcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibcb *IncomeBracketCreateBulk) ExecX(ctx context.Context) {
	if err := ibcb.Exec(ctx); err != nil {
		panic(err)
	}
}
