// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/incomebracket"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/individual"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/predicate"
)

// IncomeBracketQuery is the builder for querying IncomeBracket entities.
type IncomeBracketQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.IncomeBracket
	withPerson *IndividualQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the IncomeBracketQuery builder.
func (ibq *IncomeBracketQuery) Where(ps ...predicate.IncomeBracket) *IncomeBracketQuery {
	ibq.predicates = append(ibq.predicates, ps...)
	return ibq
}

// Limit adds a limit step to the query.
func (ibq *IncomeBracketQuery) Limit(limit int) *IncomeBracketQuery {
	ibq.limit = &limit
	return ibq
}

// Offset adds an offset step to the query.
func (ibq *IncomeBracketQuery) Offset(offset int) *IncomeBracketQuery {
	ibq.offset = &offset
	return ibq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ibq *IncomeBracketQuery) Unique(unique bool) *IncomeBracketQuery {
	ibq.unique = &unique
	return ibq
}

// Order adds an order step to the query.
func (ibq *IncomeBracketQuery) Order(o ...OrderFunc) *IncomeBracketQuery {
	ibq.order = append(ibq.order, o...)
	return ibq
}

// QueryPerson chains the current query on the "person" edge.
func (ibq *IncomeBracketQuery) QueryPerson() *IndividualQuery {
	query := &IndividualQuery{config: ibq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ibq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ibq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(incomebracket.Table, incomebracket.FieldID, selector),
			sqlgraph.To(individual.Table, individual.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, incomebracket.PersonTable, incomebracket.PersonColumn),
		)
		fromU = sqlgraph.SetNeighbors(ibq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first IncomeBracket entity from the query.
// Returns a *NotFoundError when no IncomeBracket was found.
func (ibq *IncomeBracketQuery) First(ctx context.Context) (*IncomeBracket, error) {
	nodes, err := ibq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{incomebracket.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ibq *IncomeBracketQuery) FirstX(ctx context.Context) *IncomeBracket {
	node, err := ibq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first IncomeBracket ID from the query.
// Returns a *NotFoundError when no IncomeBracket ID was found.
func (ibq *IncomeBracketQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ibq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{incomebracket.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ibq *IncomeBracketQuery) FirstIDX(ctx context.Context) int {
	id, err := ibq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single IncomeBracket entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one IncomeBracket entity is found.
// Returns a *NotFoundError when no IncomeBracket entities are found.
func (ibq *IncomeBracketQuery) Only(ctx context.Context) (*IncomeBracket, error) {
	nodes, err := ibq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{incomebracket.Label}
	default:
		return nil, &NotSingularError{incomebracket.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ibq *IncomeBracketQuery) OnlyX(ctx context.Context) *IncomeBracket {
	node, err := ibq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only IncomeBracket ID in the query.
// Returns a *NotSingularError when more than one IncomeBracket ID is found.
// Returns a *NotFoundError when no entities are found.
func (ibq *IncomeBracketQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ibq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{incomebracket.Label}
	default:
		err = &NotSingularError{incomebracket.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ibq *IncomeBracketQuery) OnlyIDX(ctx context.Context) int {
	id, err := ibq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of IncomeBrackets.
func (ibq *IncomeBracketQuery) All(ctx context.Context) ([]*IncomeBracket, error) {
	if err := ibq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ibq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ibq *IncomeBracketQuery) AllX(ctx context.Context) []*IncomeBracket {
	nodes, err := ibq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of IncomeBracket IDs.
func (ibq *IncomeBracketQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := ibq.Select(incomebracket.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ibq *IncomeBracketQuery) IDsX(ctx context.Context) []int {
	ids, err := ibq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ibq *IncomeBracketQuery) Count(ctx context.Context) (int, error) {
	if err := ibq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ibq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ibq *IncomeBracketQuery) CountX(ctx context.Context) int {
	count, err := ibq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ibq *IncomeBracketQuery) Exist(ctx context.Context) (bool, error) {
	if err := ibq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ibq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ibq *IncomeBracketQuery) ExistX(ctx context.Context) bool {
	exist, err := ibq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the IncomeBracketQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ibq *IncomeBracketQuery) Clone() *IncomeBracketQuery {
	if ibq == nil {
		return nil
	}
	return &IncomeBracketQuery{
		config:     ibq.config,
		limit:      ibq.limit,
		offset:     ibq.offset,
		order:      append([]OrderFunc{}, ibq.order...),
		predicates: append([]predicate.IncomeBracket{}, ibq.predicates...),
		withPerson: ibq.withPerson.Clone(),
		// clone intermediate query.
		sql:    ibq.sql.Clone(),
		path:   ibq.path,
		unique: ibq.unique,
	}
}

// WithPerson tells the query-builder to eager-load the nodes that are connected to
// the "person" edge. The optional arguments are used to configure the query builder of the edge.
func (ibq *IncomeBracketQuery) WithPerson(opts ...func(*IndividualQuery)) *IncomeBracketQuery {
	query := &IndividualQuery{config: ibq.config}
	for _, opt := range opts {
		opt(query)
	}
	ibq.withPerson = query
	return ibq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Class incomebracket.Class `json:"class,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.IncomeBracket.Query().
//		GroupBy(incomebracket.FieldClass).
//		Aggregate(gen.Count()).
//		Scan(ctx, &v)
//
func (ibq *IncomeBracketQuery) GroupBy(field string, fields ...string) *IncomeBracketGroupBy {
	grbuild := &IncomeBracketGroupBy{config: ibq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ibq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ibq.sqlQuery(ctx), nil
	}
	grbuild.label = incomebracket.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Class incomebracket.Class `json:"class,omitempty"`
//	}
//
//	client.IncomeBracket.Query().
//		Select(incomebracket.FieldClass).
//		Scan(ctx, &v)
//
func (ibq *IncomeBracketQuery) Select(fields ...string) *IncomeBracketSelect {
	ibq.fields = append(ibq.fields, fields...)
	selbuild := &IncomeBracketSelect{IncomeBracketQuery: ibq}
	selbuild.label = incomebracket.Label
	selbuild.flds, selbuild.scan = &ibq.fields, selbuild.Scan
	return selbuild
}

func (ibq *IncomeBracketQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ibq.fields {
		if !incomebracket.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
		}
	}
	if ibq.path != nil {
		prev, err := ibq.path(ctx)
		if err != nil {
			return err
		}
		ibq.sql = prev
	}
	return nil
}

func (ibq *IncomeBracketQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*IncomeBracket, error) {
	var (
		nodes       = []*IncomeBracket{}
		withFKs     = ibq.withFKs
		_spec       = ibq.querySpec()
		loadedTypes = [1]bool{
			ibq.withPerson != nil,
		}
	)
	if ibq.withPerson != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, incomebracket.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		return (*IncomeBracket).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		node := &IncomeBracket{config: ibq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ibq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ibq.withPerson; query != nil {
		if err := ibq.loadPerson(ctx, query, nodes, nil,
			func(n *IncomeBracket, e *Individual) { n.Edges.Person = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ibq *IncomeBracketQuery) loadPerson(ctx context.Context, query *IndividualQuery, nodes []*IncomeBracket, init func(*IncomeBracket), assign func(*IncomeBracket, *Individual)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*IncomeBracket)
	for i := range nodes {
		if nodes[i].individual_bracket == nil {
			continue
		}
		fk := *nodes[i].individual_bracket
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(individual.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "individual_bracket" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ibq *IncomeBracketQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ibq.querySpec()
	_spec.Node.Columns = ibq.fields
	if len(ibq.fields) > 0 {
		_spec.Unique = ibq.unique != nil && *ibq.unique
	}
	return sqlgraph.CountNodes(ctx, ibq.driver, _spec)
}

func (ibq *IncomeBracketQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := ibq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("gen: check existence: %w", err)
	}
	return n > 0, nil
}

func (ibq *IncomeBracketQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   incomebracket.Table,
			Columns: incomebracket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: incomebracket.FieldID,
			},
		},
		From:   ibq.sql,
		Unique: true,
	}
	if unique := ibq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ibq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incomebracket.FieldID)
		for i := range fields {
			if fields[i] != incomebracket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ibq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ibq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ibq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ibq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ibq *IncomeBracketQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ibq.driver.Dialect())
	t1 := builder.Table(incomebracket.Table)
	columns := ibq.fields
	if len(columns) == 0 {
		columns = incomebracket.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ibq.sql != nil {
		selector = ibq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ibq.unique != nil && *ibq.unique {
		selector.Distinct()
	}
	for _, p := range ibq.predicates {
		p(selector)
	}
	for _, p := range ibq.order {
		p(selector)
	}
	if offset := ibq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ibq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// IncomeBracketGroupBy is the group-by builder for IncomeBracket entities.
type IncomeBracketGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ibgb *IncomeBracketGroupBy) Aggregate(fns ...AggregateFunc) *IncomeBracketGroupBy {
	ibgb.fns = append(ibgb.fns, fns...)
	return ibgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ibgb *IncomeBracketGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := ibgb.path(ctx)
	if err != nil {
		return err
	}
	ibgb.sql = query
	return ibgb.sqlScan(ctx, v)
}

func (ibgb *IncomeBracketGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range ibgb.fields {
		if !incomebracket.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ibgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ibgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ibgb *IncomeBracketGroupBy) sqlQuery() *sql.Selector {
	selector := ibgb.sql.Select()
	aggregation := make([]string, 0, len(ibgb.fns))
	for _, fn := range ibgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ibgb.fields)+len(ibgb.fns))
		for _, f := range ibgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ibgb.fields...)...)
}

// IncomeBracketSelect is the builder for selecting fields of IncomeBracket entities.
type IncomeBracketSelect struct {
	*IncomeBracketQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ibs *IncomeBracketSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ibs.prepareQuery(ctx); err != nil {
		return err
	}
	ibs.sql = ibs.IncomeBracketQuery.sqlQuery(ctx)
	return ibs.sqlScan(ctx, v)
}

func (ibs *IncomeBracketSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ibs.sql.Query()
	if err := ibs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
