// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/SachinVarghese/pgamber/setup/ent/gen/migrate"

	"github.com/SachinVarghese/pgamber/setup/ent/gen/incomebracket"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/individual"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// IncomeBracket is the client for interacting with the IncomeBracket builders.
	IncomeBracket *IncomeBracketClient
	// Individual is the client for interacting with the Individual builders.
	Individual *IndividualClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.IncomeBracket = NewIncomeBracketClient(c.config)
	c.Individual = NewIndividualClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("gen: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("gen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		IncomeBracket: NewIncomeBracketClient(cfg),
		Individual:    NewIndividualClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		IncomeBracket: NewIncomeBracketClient(cfg),
		Individual:    NewIndividualClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		IncomeBracket.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.IncomeBracket.Use(hooks...)
	c.Individual.Use(hooks...)
}

// IncomeBracketClient is a client for the IncomeBracket schema.
type IncomeBracketClient struct {
	config
}

// NewIncomeBracketClient returns a client for the IncomeBracket from the given config.
func NewIncomeBracketClient(c config) *IncomeBracketClient {
	return &IncomeBracketClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `incomebracket.Hooks(f(g(h())))`.
func (c *IncomeBracketClient) Use(hooks ...Hook) {
	c.hooks.IncomeBracket = append(c.hooks.IncomeBracket, hooks...)
}

// Create returns a builder for creating a IncomeBracket entity.
func (c *IncomeBracketClient) Create() *IncomeBracketCreate {
	mutation := newIncomeBracketMutation(c.config, OpCreate)
	return &IncomeBracketCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IncomeBracket entities.
func (c *IncomeBracketClient) CreateBulk(builders ...*IncomeBracketCreate) *IncomeBracketCreateBulk {
	return &IncomeBracketCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IncomeBracket.
func (c *IncomeBracketClient) Update() *IncomeBracketUpdate {
	mutation := newIncomeBracketMutation(c.config, OpUpdate)
	return &IncomeBracketUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IncomeBracketClient) UpdateOne(ib *IncomeBracket) *IncomeBracketUpdateOne {
	mutation := newIncomeBracketMutation(c.config, OpUpdateOne, withIncomeBracket(ib))
	return &IncomeBracketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IncomeBracketClient) UpdateOneID(id int) *IncomeBracketUpdateOne {
	mutation := newIncomeBracketMutation(c.config, OpUpdateOne, withIncomeBracketID(id))
	return &IncomeBracketUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IncomeBracket.
func (c *IncomeBracketClient) Delete() *IncomeBracketDelete {
	mutation := newIncomeBracketMutation(c.config, OpDelete)
	return &IncomeBracketDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IncomeBracketClient) DeleteOne(ib *IncomeBracket) *IncomeBracketDeleteOne {
	return c.DeleteOneID(ib.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *IncomeBracketClient) DeleteOneID(id int) *IncomeBracketDeleteOne {
	builder := c.Delete().Where(incomebracket.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IncomeBracketDeleteOne{builder}
}

// Query returns a query builder for IncomeBracket.
func (c *IncomeBracketClient) Query() *IncomeBracketQuery {
	return &IncomeBracketQuery{
		config: c.config,
	}
}

// Get returns a IncomeBracket entity by its id.
func (c *IncomeBracketClient) Get(ctx context.Context, id int) (*IncomeBracket, error) {
	return c.Query().Where(incomebracket.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IncomeBracketClient) GetX(ctx context.Context, id int) *IncomeBracket {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPerson queries the person edge of a IncomeBracket.
func (c *IncomeBracketClient) QueryPerson(ib *IncomeBracket) *IndividualQuery {
	query := &IndividualQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ib.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(incomebracket.Table, incomebracket.FieldID, id),
			sqlgraph.To(individual.Table, individual.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, incomebracket.PersonTable, incomebracket.PersonColumn),
		)
		fromV = sqlgraph.Neighbors(ib.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IncomeBracketClient) Hooks() []Hook {
	return c.hooks.IncomeBracket
}

// IndividualClient is a client for the Individual schema.
type IndividualClient struct {
	config
}

// NewIndividualClient returns a client for the Individual from the given config.
func NewIndividualClient(c config) *IndividualClient {
	return &IndividualClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `individual.Hooks(f(g(h())))`.
func (c *IndividualClient) Use(hooks ...Hook) {
	c.hooks.Individual = append(c.hooks.Individual, hooks...)
}

// Create returns a builder for creating a Individual entity.
func (c *IndividualClient) Create() *IndividualCreate {
	mutation := newIndividualMutation(c.config, OpCreate)
	return &IndividualCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Individual entities.
func (c *IndividualClient) CreateBulk(builders ...*IndividualCreate) *IndividualCreateBulk {
	return &IndividualCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Individual.
func (c *IndividualClient) Update() *IndividualUpdate {
	mutation := newIndividualMutation(c.config, OpUpdate)
	return &IndividualUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IndividualClient) UpdateOne(i *Individual) *IndividualUpdateOne {
	mutation := newIndividualMutation(c.config, OpUpdateOne, withIndividual(i))
	return &IndividualUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IndividualClient) UpdateOneID(id int) *IndividualUpdateOne {
	mutation := newIndividualMutation(c.config, OpUpdateOne, withIndividualID(id))
	return &IndividualUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Individual.
func (c *IndividualClient) Delete() *IndividualDelete {
	mutation := newIndividualMutation(c.config, OpDelete)
	return &IndividualDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IndividualClient) DeleteOne(i *Individual) *IndividualDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *IndividualClient) DeleteOneID(id int) *IndividualDeleteOne {
	builder := c.Delete().Where(individual.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IndividualDeleteOne{builder}
}

// Query returns a query builder for Individual.
func (c *IndividualClient) Query() *IndividualQuery {
	return &IndividualQuery{
		config: c.config,
	}
}

// Get returns a Individual entity by its id.
func (c *IndividualClient) Get(ctx context.Context, id int) (*Individual, error) {
	return c.Query().Where(individual.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IndividualClient) GetX(ctx context.Context, id int) *Individual {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBracket queries the bracket edge of a Individual.
func (c *IndividualClient) QueryBracket(i *Individual) *IncomeBracketQuery {
	query := &IncomeBracketQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(individual.Table, individual.FieldID, id),
			sqlgraph.To(incomebracket.Table, incomebracket.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, individual.BracketTable, individual.BracketColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IndividualClient) Hooks() []Hook {
	return c.hooks.Individual
}
