// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/incomebracket"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/individual"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/predicate"
)

// IncomeBracketUpdate is the builder for updating IncomeBracket entities.
type IncomeBracketUpdate struct {
	config
	hooks    []Hook
	mutation *IncomeBracketMutation
}

// Where appends a list predicates to the IncomeBracketUpdate builder.
func (ibu *IncomeBracketUpdate) Where(ps ...predicate.IncomeBracket) *IncomeBracketUpdate {
	ibu.mutation.Where(ps...)
	return ibu
}

// SetClass sets the "class" field.
func (ibu *IncomeBracketUpdate) SetClass(i incomebracket.Class) *IncomeBracketUpdate {
	ibu.mutation.SetClass(i)
	return ibu
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (ibu *IncomeBracketUpdate) SetNillableClass(i *incomebracket.Class) *IncomeBracketUpdate {
	if i != nil {
		ibu.SetClass(*i)
	}
	return ibu
}

// SetPersonID sets the "person" edge to the Individual entity by ID.
func (ibu *IncomeBracketUpdate) SetPersonID(id int) *IncomeBracketUpdate {
	ibu.mutation.SetPersonID(id)
	return ibu
}

// SetNillablePersonID sets the "person" edge to the Individual entity by ID if the given value is not nil.
func (ibu *IncomeBracketUpdate) SetNillablePersonID(id *int) *IncomeBracketUpdate {
	if id != nil {
		ibu = ibu.SetPersonID(*id)
	}
	return ibu
}

// SetPerson sets the "person" edge to the Individual entity.
func (ibu *IncomeBracketUpdate) SetPerson(i *Individual) *IncomeBracketUpdate {
	return ibu.SetPersonID(i.ID)
}

// Mutation returns the IncomeBracketMutation object of the builder.
func (ibu *IncomeBracketUpdate) Mutation() *IncomeBracketMutation {
	return ibu.mutation
}

// ClearPerson clears the "person" edge to the Individual entity.
func (ibu *IncomeBracketUpdate) ClearPerson() *IncomeBracketUpdate {
	ibu.mutation.ClearPerson()
	return ibu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ibu *IncomeBracketUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ibu.hooks) == 0 {
		if err = ibu.check(); err != nil {
			return 0, err
		}
		affected, err = ibu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IncomeBracketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ibu.check(); err != nil {
				return 0, err
			}
			ibu.mutation = mutation
			affected, err = ibu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ibu.hooks) - 1; i >= 0; i-- {
			if ibu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ibu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ibu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ibu *IncomeBracketUpdate) SaveX(ctx context.Context) int {
	affected, err := ibu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ibu *IncomeBracketUpdate) Exec(ctx context.Context) error {
	_, err := ibu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibu *IncomeBracketUpdate) ExecX(ctx context.Context) {
	if err := ibu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibu *IncomeBracketUpdate) check() error {
	if v, ok := ibu.mutation.Class(); ok {
		if err := incomebracket.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`gen: validator failed for field "IncomeBracket.class": %w`, err)}
		}
	}
	return nil
}

func (ibu *IncomeBracketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   incomebracket.Table,
			Columns: incomebracket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: incomebracket.FieldID,
			},
		},
	}
	if ps := ibu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ibu.mutation.Class(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: incomebracket.FieldClass,
		})
	}
	if ibu.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   incomebracket.PersonTable,
			Columns: []string{incomebracket.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: individual.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibu.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   incomebracket.PersonTable,
			Columns: []string{incomebracket.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: individual.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ibu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incomebracket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// IncomeBracketUpdateOne is the builder for updating a single IncomeBracket entity.
type IncomeBracketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IncomeBracketMutation
}

// SetClass sets the "class" field.
func (ibuo *IncomeBracketUpdateOne) SetClass(i incomebracket.Class) *IncomeBracketUpdateOne {
	ibuo.mutation.SetClass(i)
	return ibuo
}

// SetNillableClass sets the "class" field if the given value is not nil.
func (ibuo *IncomeBracketUpdateOne) SetNillableClass(i *incomebracket.Class) *IncomeBracketUpdateOne {
	if i != nil {
		ibuo.SetClass(*i)
	}
	return ibuo
}

// SetPersonID sets the "person" edge to the Individual entity by ID.
func (ibuo *IncomeBracketUpdateOne) SetPersonID(id int) *IncomeBracketUpdateOne {
	ibuo.mutation.SetPersonID(id)
	return ibuo
}

// SetNillablePersonID sets the "person" edge to the Individual entity by ID if the given value is not nil.
func (ibuo *IncomeBracketUpdateOne) SetNillablePersonID(id *int) *IncomeBracketUpdateOne {
	if id != nil {
		ibuo = ibuo.SetPersonID(*id)
	}
	return ibuo
}

// SetPerson sets the "person" edge to the Individual entity.
func (ibuo *IncomeBracketUpdateOne) SetPerson(i *Individual) *IncomeBracketUpdateOne {
	return ibuo.SetPersonID(i.ID)
}

// Mutation returns the IncomeBracketMutation object of the builder.
func (ibuo *IncomeBracketUpdateOne) Mutation() *IncomeBracketMutation {
	return ibuo.mutation
}

// ClearPerson clears the "person" edge to the Individual entity.
func (ibuo *IncomeBracketUpdateOne) ClearPerson() *IncomeBracketUpdateOne {
	ibuo.mutation.ClearPerson()
	return ibuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ibuo *IncomeBracketUpdateOne) Select(field string, fields ...string) *IncomeBracketUpdateOne {
	ibuo.fields = append([]string{field}, fields...)
	return ibuo
}

// Save executes the query and returns the updated IncomeBracket entity.
func (ibuo *IncomeBracketUpdateOne) Save(ctx context.Context) (*IncomeBracket, error) {
	var (
		err  error
		node *IncomeBracket
	)
	if len(ibuo.hooks) == 0 {
		if err = ibuo.check(); err != nil {
			return nil, err
		}
		node, err = ibuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IncomeBracketMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ibuo.check(); err != nil {
				return nil, err
			}
			ibuo.mutation = mutation
			node, err = ibuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ibuo.hooks) - 1; i >= 0; i-- {
			if ibuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = ibuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ibuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*IncomeBracket)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IncomeBracketMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ibuo *IncomeBracketUpdateOne) SaveX(ctx context.Context) *IncomeBracket {
	node, err := ibuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ibuo *IncomeBracketUpdateOne) Exec(ctx context.Context) error {
	_, err := ibuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ibuo *IncomeBracketUpdateOne) ExecX(ctx context.Context) {
	if err := ibuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ibuo *IncomeBracketUpdateOne) check() error {
	if v, ok := ibuo.mutation.Class(); ok {
		if err := incomebracket.ClassValidator(v); err != nil {
			return &ValidationError{Name: "class", err: fmt.Errorf(`gen: validator failed for field "IncomeBracket.class": %w`, err)}
		}
	}
	return nil
}

func (ibuo *IncomeBracketUpdateOne) sqlSave(ctx context.Context) (_node *IncomeBracket, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   incomebracket.Table,
			Columns: incomebracket.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: incomebracket.FieldID,
			},
		},
	}
	id, ok := ibuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "IncomeBracket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ibuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, incomebracket.FieldID)
		for _, f := range fields {
			if !incomebracket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != incomebracket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ibuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ibuo.mutation.Class(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: incomebracket.FieldClass,
		})
	}
	if ibuo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   incomebracket.PersonTable,
			Columns: []string{incomebracket.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: individual.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ibuo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   incomebracket.PersonTable,
			Columns: []string{incomebracket.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: individual.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IncomeBracket{config: ibuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ibuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{incomebracket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
