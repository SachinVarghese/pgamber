// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/incomebracket"
	"github.com/SachinVarghese/pgamber/setup/ent/gen/individual"
)

// IncomeBracket is the model entity for the IncomeBracket schema.
type IncomeBracket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Class holds the value of the "class" field.
	Class incomebracket.Class `json:"class,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IncomeBracketQuery when eager-loading is set.
	Edges              IncomeBracketEdges `json:"edges"`
	individual_bracket *int
}

// IncomeBracketEdges holds the relations/edges for other nodes in the graph.
type IncomeBracketEdges struct {
	// Person holds the value of the person edge.
	Person *Individual `json:"person,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e IncomeBracketEdges) PersonOrErr() (*Individual, error) {
	if e.loadedTypes[0] {
		if e.Person == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: individual.Label}
		}
		return e.Person, nil
	}
	return nil, &NotLoadedError{edge: "person"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IncomeBracket) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case incomebracket.FieldID:
			values[i] = new(sql.NullInt64)
		case incomebracket.FieldClass:
			values[i] = new(sql.NullString)
		case incomebracket.ForeignKeys[0]: // individual_bracket
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type IncomeBracket", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IncomeBracket fields.
func (ib *IncomeBracket) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case incomebracket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ib.ID = int(value.Int64)
		case incomebracket.FieldClass:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field class", values[i])
			} else if value.Valid {
				ib.Class = incomebracket.Class(value.String)
			}
		case incomebracket.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field individual_bracket", value)
			} else if value.Valid {
				ib.individual_bracket = new(int)
				*ib.individual_bracket = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPerson queries the "person" edge of the IncomeBracket entity.
func (ib *IncomeBracket) QueryPerson() *IndividualQuery {
	return (&IncomeBracketClient{config: ib.config}).QueryPerson(ib)
}

// Update returns a builder for updating this IncomeBracket.
// Note that you need to call IncomeBracket.Unwrap() before calling this method if this IncomeBracket
// was returned from a transaction, and the transaction was committed or rolled back.
func (ib *IncomeBracket) Update() *IncomeBracketUpdateOne {
	return (&IncomeBracketClient{config: ib.config}).UpdateOne(ib)
}

// Unwrap unwraps the IncomeBracket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ib *IncomeBracket) Unwrap() *IncomeBracket {
	_tx, ok := ib.config.driver.(*txDriver)
	if !ok {
		panic("gen: IncomeBracket is not a transactional entity")
	}
	ib.config.driver = _tx.drv
	return ib
}

// String implements the fmt.Stringer.
func (ib *IncomeBracket) String() string {
	var builder strings.Builder
	builder.WriteString("IncomeBracket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ib.ID))
	builder.WriteString("class=")
	builder.WriteString(fmt.Sprintf("%v", ib.Class))
	builder.WriteByte(')')
	return builder.String()
}

// IncomeBrackets is a parsable slice of IncomeBracket.
type IncomeBrackets []*IncomeBracket

func (ib IncomeBrackets) config(cfg config) {
	for _i := range ib {
		ib[_i].config = cfg
	}
}
